task  :  decnet-completion
network_model  :  enet2021
mode  :  train
dataset  :  nn
workers  :  4
epochs  :  100
criterion  :  l2
batch_size  :  1
learning_rate  :  0.01
weight_decay  :  1e-06
print_freq  :  10
resume  :
data_folder  :  /datasets
convolutional_layer_encoding  :  xyz
dilation_rate  :  2
val_h  :  352
val_w  :  608
min_depth_eval  :  0.1
max_depth_eval  :  80.0
kitti_crop  :  eigen_crop
train_datalist  :  train_dim_kitti.list
val_datalist  :  val_dim_kitti.list
root_folder  :  data/kitti_dataset/val_selection_cropped/
torch_mode  :  pytorch
wandblogger  :  False
project  :  depth
entity  :  wandbdimar
STEP 2. Loading datasets...
Loaded 600 training files
Loaded 400 val files
STEP 3. Loading model and metrics...
 11%|████████████████████▊                                                                                                                                                                             | 43/400 [00:01<00:14, 24.86it/s]
Loaded model enet2021 for decnet-completion
STEP 4. Training or eval stage...
STEP. Testing block...
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    initial_lr: 0.01
    lr: 0.01
    weight_decay: 0
)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([38923]) torch.Size([38923])
(0.800000011920929, 80.0, 74.80315399169922, 80.0) (5.8984375, 79.85546875, 19.398237228393555, 12.265625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([42318]) torch.Size([42318])
(0.800000011920929, 80.0, 77.82526397705078, 80.0) (6.00390625, 79.97265625, 20.908411026000977, 15.60546875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([51270]) torch.Size([51270])
(0.800000011920929, 80.0, 74.46047973632812, 80.0) (5.52734375, 75.96875, 17.05760383605957, 10.5625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([36498]) torch.Size([36498])
(0.800000011920929, 80.0, 71.86907196044922, 80.0) (6.16796875, 78.72265625, 18.997787475585938, 14.60546875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([37303]) torch.Size([37303])
(0.800000011920929, 80.0, 77.88957977294922, 80.0) (5.4375, 78.265625, 14.028958320617676, 9.6875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([38303]) torch.Size([38303])
(0.800000011920929, 80.0, 77.39053344726562, 80.0) (4.609375, 79.5234375, 16.341081619262695, 12.78515625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([55070]) torch.Size([55070])
(0.800000011920929, 80.0, 79.99137878417969, 80.0) (6.25, 79.91796875, 18.30394172668457, 12.7578125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([59293]) torch.Size([59293])
(0.800000011920929, 80.0, 79.95591735839844, 80.0) (5.76953125, 79.98046875, 15.1326904296875, 11.4921875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([58716]) torch.Size([58716])
(0.800000011920929, 80.0, 78.8156967163086, 80.0) (5.55859375, 79.94921875, 16.095067977905273, 12.23046875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53716]) torch.Size([53716])
(0.800000011920929, 80.0, 79.93364715576172, 80.0) (6.0859375, 79.984375, 20.98192024230957, 13.7421875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([55470]) torch.Size([55470])
(80.0, 80.0, 80.0, 80.0) (4.31640625, 79.94921875, 15.154264450073242, 11.27734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([42300]) torch.Size([42300])
(0.800000011920929, 80.0, 79.93446350097656, 80.0) (4.62109375, 78.796875, 15.498099327087402, 12.90625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([33933]) torch.Size([33933])
(0.800000011920929, 80.0, 75.65406799316406, 80.0) (4.54296875, 79.94921875, 19.760398864746094, 14.28125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([48680]) torch.Size([48680])
(0.800000011920929, 80.0, 76.98688507080078, 80.0) (6.10546875, 79.890625, 15.516222953796387, 11.28125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([59452]) torch.Size([59452])
(0.800000011920929, 80.0, 79.75088500976562, 80.0) (5.515625, 79.96875, 16.798879623413086, 11.859375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([40151]) torch.Size([40151])
(0.800000011920929, 80.0, 77.92881774902344, 80.0) (4.19921875, 79.34375, 15.74635124206543, 11.80078125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([49468]) torch.Size([49468])
(0.800000011920929, 80.0, 79.66057586669922, 80.0) (5.42578125, 79.96484375, 19.29153823852539, 13.78515625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([36877]) torch.Size([36877])
(0.800000011920929, 80.0, 75.83564758300781, 80.0) (6.15234375, 79.9921875, 18.166072845458984, 13.01953125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([26118]) torch.Size([26118])
(0.800000011920929, 80.0, 75.19669342041016, 80.0) (5.23828125, 72.66015625, 12.272268295288086, 9.44140625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([44445]) torch.Size([44445])
(0.800000011920929, 80.0, 77.42325592041016, 80.0) (6.09765625, 79.16796875, 15.235642433166504, 11.03125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([31352]) torch.Size([31352])
(0.800000011920929, 80.0, 78.77734375, 80.0) (6.1328125, 71.2421875, 16.054285049438477, 12.453125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([38710]) torch.Size([38710])
(0.800000011920929, 80.0, 75.8466567993164, 80.0) (6.16015625, 79.46875, 17.409160614013672, 12.296875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([40153]) torch.Size([40153])
(0.800000011920929, 80.0, 79.14395141601562, 80.0) (5.08984375, 78.94921875, 16.438169479370117, 12.796875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([26612]) torch.Size([26612])
(0.800000011920929, 80.0, 79.36609649658203, 80.0) (5.8359375, 69.26953125, 10.733597755432129, 8.52734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([34149]) torch.Size([34149])
(0.800000011920929, 80.0, 74.45235443115234, 80.0) (4.80859375, 79.92578125, 19.529726028442383, 12.5078125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([52724]) torch.Size([52724])
(0.800000011920929, 80.0, 78.36714935302734, 80.0) (6.1015625, 79.8125, 15.936483383178711, 12.515625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([47532]) torch.Size([47532])
(0.800000011920929, 80.0, 79.67174530029297, 80.0) (5.84765625, 79.99609375, 17.425031661987305, 13.40625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([44125]) torch.Size([44125])
(0.800000011920929, 80.0, 74.64581298828125, 80.0) (6.10546875, 79.97265625, 17.82120132446289, 13.92578125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([56197]) torch.Size([56197])
(0.800000011920929, 80.0, 78.65690612792969, 80.0) (5.546875, 77.92578125, 14.986611366271973, 12.17578125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([50224]) torch.Size([50224])
(0.800000011920929, 80.0, 79.95584106445312, 80.0) (4.3125, 78.08203125, 13.46774673461914, 11.14453125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([38000]) torch.Size([38000])
(0.800000011920929, 80.0, 77.8282470703125, 80.0) (3.65234375, 79.35546875, 18.737701416015625, 13.42578125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([44308]) torch.Size([44308])
(0.800000011920929, 80.0, 77.62979125976562, 80.0) (5.515625, 79.609375, 15.671440124511719, 12.09375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([64020]) torch.Size([64020])
(0.800000011920929, 80.0, 79.83052062988281, 80.0) (5.96875, 79.9375, 18.674245834350586, 13.46484375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([44568]) torch.Size([44568])
(0.800000011920929, 80.0, 79.12924194335938, 80.0) (4.703125, 79.7734375, 14.69599437713623, 11.65625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([30341]) torch.Size([30341])
(80.0, 80.0, 80.0, 80.0) (5.22265625, 79.875, 17.419790267944336, 13.109375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([41301]) torch.Size([41301])
(0.800000011920929, 80.0, 77.3344955444336, 80.0) (4.765625, 78.99609375, 16.405719757080078, 11.26953125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53028]) torch.Size([53028])
(0.800000011920929, 80.0, 79.90441131591797, 80.0) (5.77734375, 79.984375, 19.8764705657959, 16.265625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([45840]) torch.Size([45840])
(0.800000011920929, 80.0, 79.81858825683594, 80.0) (3.6640625, 77.11328125, 15.872387886047363, 11.921875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([49987]) torch.Size([49987])
(0.800000011920929, 80.0, 77.5425796508789, 80.0) (4.23046875, 79.96484375, 18.103042602539062, 13.93359375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([46211]) torch.Size([46211])
(0.800000011920929, 80.0, 79.90402221679688, 80.0) (5.98046875, 64.35546875, 15.87010383605957, 15.2890625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53348]) torch.Size([53348])
(0.800000011920929, 80.0, 79.47000122070312, 80.0) (6.3203125, 79.984375, 16.063310623168945, 13.0703125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([33978]) torch.Size([33978])
(80.0, 80.0, 80.0, 80.0) (4.234375, 77.828125, 14.740342140197754, 11.48828125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([48758]) torch.Size([48758])
(0.800000011920929, 80.0, 79.94314575195312, 80.0) (5.71875, 79.4375, 19.59157371520996, 14.2421875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([27595]) torch.Size([27595])
(0.800000011920929, 80.0, 78.22915649414062, 80.0) (4.42578125, 66.96875, 17.604337692260742, 17.15234375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([33534]) torch.Size([33534])
(0.800000011920929, 80.0, 76.52345275878906, 80.0) (6.16796875, 77.8828125, 20.650436401367188, 16.68359375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([35415]) torch.Size([35415])
(0.800000011920929, 80.0, 75.6391372680664, 80.0) (5.46484375, 79.94140625, 19.340627670288086, 13.37890625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([36455]) torch.Size([36455])
(0.800000011920929, 80.0, 76.06770324707031, 80.0) (6.0859375, 79.68359375, 17.482742309570312, 14.10546875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([63973]) torch.Size([63973])
(0.800000011920929, 80.0, 79.98143005371094, 80.0) (5.76171875, 78.19140625, 16.04913902282715, 12.51171875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([47311]) torch.Size([47311])
(0.800000011920929, 80.0, 76.74568939208984, 80.0) (6.08203125, 79.90625, 16.7800350189209, 11.9765625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([11150]) torch.Size([11150])
(80.0, 80.0, 80.0, 80.0) (6.0859375, 68.44921875, 19.067886352539062, 16.66015625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([41903]) torch.Size([41903])
(80.0, 80.0, 80.0, 80.0) (6.03515625, 65.78515625, 16.25324249267578, 14.71484375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([35924]) torch.Size([35924])
(0.800000011920929, 80.0, 79.83023834228516, 80.0) (5.3203125, 76.78125, 15.883853912353516, 12.1171875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([64581]) torch.Size([64581])
(80.0, 80.0, 80.0, 80.0) (6.078125, 78.796875, 18.633453369140625, 16.18359375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([39231]) torch.Size([39231])
(0.800000011920929, 80.0, 76.05524444580078, 80.0) (6.20703125, 79.74609375, 17.992155075073242, 14.33203125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([47863]) torch.Size([47863])
(0.800000011920929, 80.0, 79.19580078125, 80.0) (3.71484375, 79.96875, 16.005586624145508, 12.37109375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([52260]) torch.Size([52260])
(80.0, 80.0, 80.0, 80.0) (5.71875, 78.91015625, 17.486419677734375, 12.3671875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([49652]) torch.Size([49652])
(0.800000011920929, 80.0, 77.83863830566406, 80.0) (6.0703125, 79.62109375, 16.319826126098633, 12.25390625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53381]) torch.Size([53381])
(0.800000011920929, 80.0, 78.28190612792969, 80.0) (5.8359375, 76.2265625, 16.38003921508789, 13.99609375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([49630]) torch.Size([49630])
(0.800000011920929, 80.0, 79.99201965332031, 80.0) (5.83984375, 79.70703125, 18.35720443725586, 13.015625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([43966]) torch.Size([43966])
(80.0, 80.0, 80.0, 80.0) (5.73046875, 79.625, 18.451208114624023, 14.734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([48726]) torch.Size([48726])
(0.800000011920929, 80.0, 77.90159606933594, 80.0) (3.7109375, 77.83203125, 16.38003921508789, 11.90625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([51468]) torch.Size([51468])
(0.800000011920929, 80.0, 78.07801055908203, 80.0) (6.0859375, 79.6953125, 17.265371322631836, 12.60546875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([61469]) torch.Size([61469])
(0.800000011920929, 80.0, 79.9471664428711, 80.0) (5.46484375, 76.6484375, 16.4606876373291, 11.734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([61742]) torch.Size([61742])
(80.0, 80.0, 80.0, 80.0) (5.91015625, 67.25, 17.995210647583008, 14.69140625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([41087]) torch.Size([41087])
(0.800000011920929, 80.0, 77.40349578857422, 80.0) (6.15234375, 79.671875, 20.923603057861328, 17.6484375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([36023]) torch.Size([36023])
(0.800000011920929, 80.0, 78.73800659179688, 80.0) (5.609375, 79.83984375, 18.469223022460938, 15.64453125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([55518]) torch.Size([55518])
(80.0, 80.0, 80.0, 80.0) (5.890625, 79.203125, 17.936756134033203, 13.20703125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([51332]) torch.Size([51332])
(0.800000011920929, 80.0, 79.61273193359375, 80.0) (5.5546875, 79.98828125, 14.33810043334961, 11.05859375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53919]) torch.Size([53919])
(0.800000011920929, 80.0, 79.99706268310547, 80.0) (5.78515625, 79.98828125, 18.47525405883789, 14.0234375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([43984]) torch.Size([43984])
(0.800000011920929, 80.0, 74.23250579833984, 80.0) (5.58203125, 77.53125, 15.264453887939453, 12.06640625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([54803]) torch.Size([54803])
(80.0, 80.0, 80.0, 80.0) (5.78125, 75.7421875, 14.997370719909668, 11.13671875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([49763]) torch.Size([49763])
(0.800000011920929, 80.0, 78.53577423095703, 80.0) (3.58984375, 77.7734375, 13.770248413085938, 11.47265625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([47229]) torch.Size([47229])
(0.800000011920929, 80.0, 78.10003662109375, 80.0) (3.6953125, 79.9921875, 15.076324462890625, 12.2734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([50141]) torch.Size([50141])
(0.800000011920929, 80.0, 77.07467651367188, 80.0) (6.296875, 79.95703125, 17.16195297241211, 13.6171875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([36159]) torch.Size([36159])
(0.800000011920929, 80.0, 79.98466491699219, 80.0) (5.734375, 78.24609375, 15.458064079284668, 10.375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([32373]) torch.Size([32373])
(0.800000011920929, 80.0, 79.99755096435547, 80.0) (5.76953125, 79.5859375, 13.35462474822998, 10.3046875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([64363]) torch.Size([64363])
(80.0, 80.0, 80.0, 80.0) (5.8671875, 79.98828125, 17.551368713378906, 13.765625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([45742]) torch.Size([45742])
(0.800000011920929, 80.0, 79.8943862915039, 80.0) (4.96484375, 79.26171875, 17.056987762451172, 12.671875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([35951]) torch.Size([35951])
(0.800000011920929, 80.0, 79.26860046386719, 80.0) (6.16796875, 79.07421875, 15.000958442687988, 12.35546875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([39593]) torch.Size([39593])
(0.800000011920929, 80.0, 73.41683959960938, 80.0) (6.05859375, 79.84375, 17.571552276611328, 12.90234375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([56062]) torch.Size([56062])
(80.0, 80.0, 80.0, 80.0) (5.875, 79.6640625, 18.149751663208008, 15.70703125)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([50115]) torch.Size([50115])
(0.800000011920929, 80.0, 79.98577880859375, 80.0) (6.02734375, 79.8359375, 19.979373931884766, 15.7734375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([55900]) torch.Size([55900])
(0.800000011920929, 80.0, 76.38712310791016, 80.0) (6.02734375, 79.953125, 15.687292098999023, 12.234375)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([39464]) torch.Size([39464])
(0.800000011920929, 80.0, 75.47847747802734, 80.0) (6.09375, 79.9921875, 19.592086791992188, 14.4140625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([53623]) torch.Size([53623])
(0.800000011920929, 80.0, 79.02371978759766, 80.0) (3.546875, 77.9921875, 13.279667854309082, 10.53515625)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([41427]) torch.Size([41427])
(0.800000011920929, 80.0, 76.74038696289062, 80.0) (5.328125, 79.99609375, 15.151627540588379, 10.4296875)
torch.Size([352, 608]) torch.Size([352, 608])
torch.Size([50461]) torch.Size([50461])
 22%|██████████████████████████████████████████▏                                                                                                                                                       | 87/400 [00:03<00:13, 23.37it/s]
Traceback (most recent call last):
  File "main.py", line 447, in <module>
    evaluation_block()
  File "main.py", line 190, in evaluation_block
    for i, data in enumerate(tqdm(test_dl)):
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/tqdm/std.py", line 1180, in __iter__
    for obj in iterable:
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 521, in __next__
    data = self._next_data()
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 561, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 49, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 49, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/dim/depth_2022/features/decnet_dataloaders.py", line 70, in __getitem__
    rgb = np.array(Image.open(self.files[index]['rgb']))
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/PIL/Image.py", line 698, in __array__
    new["data"] = self.tobytes()
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/PIL/Image.py", line 744, in tobytes
    self.load()
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/PIL/ImageFile.py", line 255, in load
    n, err_code = decoder.decode(b)
KeyboardInterrupt